---
if: |
  has_started_artifacts
code: |
  artifacts_folder_and_runtime_config_final_status = 'repeated'
---
id: set up artifacts
if: |
  not has_started_artifacts
need:
  - artifacts_errored
  - has_command
  - _log
  - _debug
code: |
  import subprocess
  import json

  # Get this now to avoid idempotency problems
  setup_outputs
  custom_env
  
  setup_stage = 'artifacts'
  artifacts_error_msgs = []

  # In case we need them later
  artifacts_stderr_message = f'‚ñ†‚ñ†‚ñ† ALKiln artifacts ERROR ALKP0016: The artifacts folder python subprocess completed, but the `alkiln-artifacts` command\'s javascript was unhappy.'
  artifacts_exception_message = f'‚ñ†‚ñ†‚ñ† ALKiln artifacts ERROR ALKP0017: Errored when ALKiP tried to run the artifacts folder setup process.'

  has_started_artifacts = True

  # Gatekeeper
  bin_name = "alkiln-artifacts"
  artfct_cmd_exists = has_command( bin_name )
  if not artfct_cmd_exists:
    no_bin_msg = f"üñäÔ∏è ALKP0023 Note: The '{ bin_name }' command doesn't exist in this version of ALKiln"
    _debug( no_bin_msg )
    artifacts_folder_and_runtime_config_final_status = 'nonexistent'

  else:
    _debug(f"üí° ALKP0032 Info: The '{ bin_name }' command exists.")
  
    artifacts_subprocess = None
    try:
    
      # import os
      # cwd = os.getcwd()
      # _log( f'üò≠üò≠üò≠ Regular da cwd = {cwd}' )
      # "/"
  
      process_args = [f'/var/www/.npm-global/bin/{ bin_name }']
      _debug(f"process_args: { json.dumps( process_args ) }")
    
      artifacts_subprocess = subprocess.run(
        process_args,
        check=False,
        capture_output=True,
        env=custom_env
        , cwd='/tmp'
      )
    
    except Exception as artifacts_error:
      import traceback

      artifacts_errored = True
      _log( artifacts_exception_message )
      _log("\n".join( traceback.format_exception( artifacts_error ) ))
      artifacts_error_msgs.extend([ artifacts_exception_message, artifacts_error ])
      # Discuss: Should we `raise`? Should we stop? Keep going?
      
    if artifacts_subprocess and artifacts_subprocess.returncode != 0:
      artifacts_errored = True
      artifacts_stderr = artifacts_subprocess.stderr.decode('utf-8')
      _log( artifacts_stderr_message )
      _log( artifacts_stderr )
      artifacts_error_msgs.extend([ artifacts_stderr_message, artifacts_stderr ])
    
    if artifacts_subprocess and artifacts_subprocess.stdout.decode('utf-8'):
      # stdouts were actually created before the errors happened
      setup_outputs.append( artifacts_subprocess.stdout.decode('utf-8') )
    setup_outputs.extend( artifacts_error_msgs )
  
    artifacts_folder_and_runtime_config_final_status = 'done'
---
id: default started artifacts value
code: |
  has_started_artifacts = False
---
id: default artifacts errored value
code: |
  artifacts_errored = False
---